{"version":3,"sources":["Header.js","data.js","Item.js","ProductListPage.js","Cart.js","CheckOutPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","data","product","price","quantity","productId","Item","addToCart","props","onQuantityChange","onAddingCart","this","disabled","onClick","ProductListPage","quantities","map","item","key","onCheckOut","Cart","printCart","cart","cartItems","filter","hasOwnProperty","total","reduce","acc","element","CheckOutPage","trigger","onUpdateCart","App","quantityChangeHandler","pdtId","quant","newQ","state","setState","makeCheckOutPage","page","makeProductListPage","forEach","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8a6beab.chunk.js","sourcesContent":["import React from 'react';\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className='header-class'>\r\n                <h1>Shoppoholic.com</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header;","const data = [\r\n    {\r\n      product : 'Whirlpool Refrigerator',\r\n      price : 12500,\r\n      quantity : 7,\r\n      productId: 100\r\n    },\r\n    {\r\n      product: 'Moto G Play 16GB',\r\n      price: 9800,\r\n      quantity: 4,\r\n      productId: 101\r\n    },\r\n    {\r\n      product: 'WD External Hard Disk 1 TB',\r\n      price: 5500,\r\n      quantity: 10,\r\n      productId: 102\r\n    },\r\n    {\r\n      product: 'Apple iPhone 7 64 GB',\r\n      price: 65500,\r\n      quantity: 5,\r\n      productId: 103\r\n    }\r\n];\r\nexport default data;","import React from 'react';\r\n\r\nclass Item extends React.Component {\r\n  addToCart = ()=>{\r\n    this.props.onQuantityChange(this.props.productId,this.props.quantity - 1);\r\n    this.props.onAddingCart(this.props.productId);\r\n  }\r\n  \r\n    render() {\r\n      return (\r\n        <div className='items'>\r\n            <div className='product'>\r\n            <h2>{this.props.product}</h2>\r\n            <p>Price:Rs.{this.props.price}</p>\r\n            <p>Qantity:{this.props.quantity}</p>\r\n            <hr></hr>\r\n            </div>   \r\n            <div className='button-class'>\r\n              <button className=\"addcart-button\"\r\n               disabled={this.props.quantity === 0}\r\n               onClick={this.addToCart}>Add to Cart</button>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\nimport data from './data';\r\n class ProductListPage extends React.Component{\r\n     render() {\r\n        const quantities = this.props.quantities;\r\n        return(\r\n            <div className='productlistpage'>\r\n                {data.map((item) =>\r\n                <Item \r\n                    key={item.productId}\r\n                    product={item.product}\r\n                    price={item.price}\r\n                    quantity={quantities[item.productId]}\r\n                    onQuantityChange={this.props.onQuantityChange}\r\n                    onAddingCart={this.props.onAddingCart}\r\n                    productId={item.productId}\r\n                    />\r\n                )}\r\n                <div className='viewcart-class'>\r\n                    <button className='viewcart-button' \r\n                            onClick={this.props.onCheckOut}>\r\n                            View Cart\r\n                    </button>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n     }\r\n }\r\n export default ProductListPage","import React from 'react';\r\nimport data from './data';\r\nclass Cart extends React.Component{\r\n     printCart =() =>{\r\n        const cart = this.props.cart;\r\n        const cartItems =  data.filter((item) =>{\r\n            return cart.hasOwnProperty(item.productId) && cart[item.productId] > 0\r\n        });\r\n        let total = cartItems.reduce((acc,item) =>\r\n            acc + (item.price)*(cart[item.productId]),0)\r\n        \r\n        return(\r\n                <div className='tablediv'>\r\n                    <table className='table-class'>\r\n                      <tr className=\"table-head\">\r\n                        <th>Product</th>\r\n                        <th>Quantity</th>\r\n                        <th>Price</th>\r\n                      </tr>  \r\n                    {cartItems.map((element)=>\r\n                        <tr>\r\n                        <th>{element.product}</th>\r\n                        <th>{cart[element.productId]}</th>\r\n                        <th>Rs: {(element.price)*(cart[element.productId])}</th>\r\n                        </tr>\r\n                    )}\r\n                        <tr>\r\n                        <th></th>\r\n                        <th></th>\r\n                        <th className='total'>Total: Rs: {total}</th>  \r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                \r\n        );\r\n    };\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.printCart()}\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\nexport default Cart;","import React from 'react';\r\nimport Cart from './Cart';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nclass CheckOutPage extends React.Component{\r\n    render() {\r\n        const cart = this.props.cart;\r\n       return(\r\n           <div>\r\n             <Cart cart={cart}/>\r\n             <div className='checkout-buttons'>\r\n                <Popup trigger={<button className='viewcart-button'> Proceed to Buy</button>}>\r\n                <div>Purchase confirmed !!</div>\r\n                </Popup>\r\n                <button className='viewcart-button'\r\n                        onClick={this.props.onUpdateCart}>\r\n                        Update cart\r\n                </button>\r\n             </div>\r\n           </div>\r\n       );\r\n    }\r\n}\r\nexport default CheckOutPage","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport data from './data';\r\nimport ProductListPage from './ProductListPage';\r\nimport CheckOutPage from './CheckOutPage';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    var quantities = {};\r\n    var cart = {};\r\n    const listingPage = 'listing_page';\r\n    data.forEach((item)=>{\r\n      quantities[item.productId] = item.quantity;\r\n      cart[item.productId] = 0;\r\n    });\r\n    this.state ={\r\n      quantities: quantities,\r\n      cart: cart,\r\n      page: listingPage\r\n    }\r\n  }\r\n  quantityChangeHandler = (pdtId,quant) =>{\r\n    const newQ = {...this.state.quantities};\r\n    newQ[pdtId] = quant;\r\n    this.setState({\r\n      quantities: newQ\r\n    });\r\n  }\r\n  addToCart = (pdtId) =>{\r\n    const newQ = {...this.state.cart};\r\n    newQ[pdtId] = newQ[pdtId] + 1;\r\n    this.setState({\r\n      cart: newQ\r\n    });\r\n  }\r\n  makeCheckOutPage = () =>{ \r\n    const checkOutPage = 'checkout_page';\r\n    this.setState({\r\n      page: checkOutPage\r\n    });\r\n  }\r\n  makeProductListPage = () =>{\r\n    const listingPage = 'listing_page';\r\n    this.setState({\r\n      page: listingPage\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        {this.state.page === 'listing_page'\r\n        ?<ProductListPage quantities ={this.state.quantities}\r\n                           onQuantityChange={this.quantityChangeHandler}\r\n                           onAddingCart={this.addToCart}\r\n                           onCheckOut={this.makeCheckOutPage}/>\r\n        : <CheckOutPage cart={this.state.cart}\r\n                        onUpdateCart={this.makeProductListPage}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}